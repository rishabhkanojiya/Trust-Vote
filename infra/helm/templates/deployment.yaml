# deployment-template

{{- range .Values.components }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ printf "%s-deployment" .name }}
spec:
  replicas: {{ .replicaCount }}
  selector:
    matchLabels:
      app: {{ .name }}
  template:
    metadata:
      labels:
        app: {{ .name }}
    spec:
      containers:
        - name: {{ .name }}
          image: "{{ .image.repository }}"
          resources:
            requests:
              cpu: "{{ .resources.requests.cpu }}"
              memory: "{{ .resources.requests.memory }}"
            limits:
              cpu: "{{ .resources.limits.cpu }}"
              memory: "{{ .resources.limits.memory }}"
          envFrom:
            - configMapRef:
                name: common-config
            - secretRef:
                name: common-secrets
          env:
            {{- range $key, $value := .env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          {{- if .volume }}
          volumeMounts:
            - name: {{ .name }}-volume
              mountPath: {{ .volume.path }}
              subPath: {{ .volume.subPath }}
          {{- end }}
      {{- if .volume }}
      volumes:
        - name: {{ .name }}-volume
          persistentVolumeClaim:
            claimName: {{ .volume.claimName }}
      {{- end }}
---
{{- if .service }}
apiVersion: v1
kind: Service
metadata:
  name: {{ printf "%s-svc" .name }}
spec:
  selector:
    app: {{ .name }}
  ports:
    - name: {{ .service.name | default .name }}
      protocol: TCP
      port: {{ .service.port }}
      targetPort: {{ .service.port }}
--- 
{{- end }}
{{- end }}

# job-template
{{- range .Values.jobs }}
apiVersion: batch/v1
kind: Job
metadata:
    name: {{ printf "%s-job" .name }}
spec:
  completions: {{ .completions }}
  backoffLimit: {{ .backoffLimit }}
  selector: {} # Ensure that the selector is auto-generated
  template:
    metadata:
      labels:
        app: {{ .name }}
    spec:
      restartPolicy: Never
      containers:
        - name: {{ .name }}
          image: {{ .image }}
          resources:
            requests:
              cpu: "{{ .resources.requests.cpu }}"
              memory: "{{ .resources.requests.memory }}"
            limits:
              cpu: "{{ .resources.limits.cpu }}"
              memory: "{{ .resources.limits.memory }}"
          envFrom:
            - configMapRef:
                name: common-config
            - secretRef:
                name: common-secrets
          env:
            {{- range $key, $value := .env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
--- 
{{- end }}

# pvc-template

{{- range .Values.volumes }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ printf "%s-pvc" .name }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .storage }}
---     
{{- end }}

# cronjob-template

{{- range .Values.cronJobs }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .name }}
spec:
  schedule: "{{ .schedule }}"
  successfulJobsHistoryLimit: {{ .successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .failedJobsHistoryLimit }}
  concurrencyPolicy: {{ .concurrencyPolicy }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: {{ .name }}-cron
        spec:
          containers:
            - name: {{ .name }}-cron
              image: "{{ .image }}"
              resources:
                requests:
                  cpu: "{{ .resources.requests.cpu }}"
                  memory: "{{ .resources.requests.memory }}"
                limits:
                  cpu: "{{ .resources.limits.cpu }}"
                  memory: "{{ .resources.limits.memory }}"
              envFrom:
                - configMapRef:
                    name: common-config
                - secretRef:
                    name: common-secrets
              env:
                - name: MODE
                  value: "cron"
          restartPolicy: OnFailure
---
{{- end }}

# ingress-template

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-svc
  {{- if .Values.ingress.annotations }}
  annotations:  
    {{- range $key, $value := .Values.ingress.annotations }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  {{- end }}
spec:
  ingressClassName: {{ .Values.ingress.ingressClassName }}
  {{- if .Values.ingress.tls }}
  tls:
    - hosts:
        {{- range .Values.ingress.tls.hosts }}
        - {{ . }}
        {{- end }}
      secretName: {{ .Values.ingress.tls.secretName }}
  {{- end }}
  rules:
    {{- range .Values.ingress.rules }}
    {{- if .host }}
    - host: {{ .host }}
    {{- end }}
      http:
        paths:
          {{- range .paths }}
          - path: {{ .path }}
            pathType: {{ .pathType }}
            backend:
              service:
                name: {{ .backend.serviceName }}
                port:
                  number: {{ .backend.servicePort }}
          {{- end }}
    {{- end }}

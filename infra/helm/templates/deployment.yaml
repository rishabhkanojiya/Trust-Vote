# deployment-template

{{- range .Values.components }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ printf "%s-deployment" .name }}
spec:
  replicas: {{ .replicaCount }}
  selector:
    matchLabels:
      app: {{ .name }}
  template:
    metadata:
      labels:
        app: {{ .name }}
    spec:
      {{- if .waitForMigration }}
      # initContainers:
      # - name: wait-for-job
      #   image: busybox
      #   command:
      #   - /bin/sh
      #   - -c
      #   - |
      #     POD_NAME=$(echo $HOSTNAME | cut -d'-' -f1-5)
      #     while true; do
      #       POD_STATUS=$(kubectl get job internal-migration-job -n trustvote-dev -o jsonpath={$.status.succeeded})
      #       if [ "$POD_STATUS" == "1" ]; then
      #         echo "Pod $POD_NAME is running!"
      #         break
      #       else
      #         echo "Waiting for pod $POD_NAME to start..."
      #         sleep 5
      #       fi
      #     done
      # initContainers:
      # - command:
      #   - kubernetes-entrypoint
      #   name: init-dependency-check
      #   env:
      #   - name: POD_NAME
      #     valueFrom:
      #       fieldRef:
      #         apiVersion: v1
      #         fieldPath: metadata.name
      #   - name: NAMESPACE
      #     valueFrom:
      #       fieldRef:
      #         apiVersion: v1
      #         fieldPath: metadata.namespace
      #   - name: DEPENDENCY_JOBS
      #     value: internal-migration-job
      #   - name: COMMAND
      #     value: echo done
      #   image: projects.registry.vmware.com/tcx/snapshot/stackanetes/kubernetes-entrypoint:latest
      #   securityContext:
      #     privileged: true
      #     runAsUser: 0
      # initContainers:
      #   - name: wait-for-pg
      #     image: busybox:latest
      #     imagePullPolicy: IfNotPresent
      #     command: ['sh', '-c', 'until nc -vz ${POD_NAME}.${POD_NAMESPACE} 5432; do echo "Waiting for postgres..."; sleep 3; done;']
      #     env:
      #       - name: POD_NAME
      #         value: internal-migration-job
      #       - name: POD_NAMESPACE
      #         valueFrom:
      #           fieldRef:
      #             fieldPath: metadata.namespace
      # initContainers:
      #   - name: wait-for-job
      #     image: busybox:latest
      #     imagePullPolicy: IfNotPresent
      #     # command: ['sh', '-c', 'kubectl wait --for=condition=complete --timeout=50s job/${POD_NAME} -n ${POD_NAMESPACE}']
      #     command: ['sh', '-c', 'kubectl wait --for=condition=complete --timeout=1s internal-migration-job -n trustvote-dev']
      #     env:
      #       - name: POD_NAME
      #         value: internal-migration-job
      #       - name: POD_NAMESPACE
      #         valueFrom:
      #           fieldRef:
      #             fieldPath: metadata.namespace
      {{- end }}
      containers:
        - name: {{ .name }}
          image: "{{ .image.repository }}"
          resources:
            requests:
              cpu: "{{ .resources.requests.cpu }}"
              memory: "{{ .resources.requests.memory }}"
            limits:
              cpu: "{{ .resources.limits.cpu }}"
              memory: "{{ .resources.limits.memory }}"
          envFrom:
            - configMapRef:
                name: common-config
            - secretRef:
                name: common-secrets
          env:
            {{- range $key, $value := .env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          {{- if .volume }}
          volumeMounts:
            - name: {{ .name }}-volume
              mountPath: {{ .volume.path }}
              subPath: {{ .volume.subPath }}
          {{- end }}
      {{- if .volume }}
      volumes:
        - name: {{ .name }}-volume
          persistentVolumeClaim:
            claimName: {{ .volume.claimName }}
      {{- end }}
---
{{- if .service }}
apiVersion: v1
kind: Service
metadata:
  name: {{ printf "%s-svc" .name }}
spec:
  selector:
    app: {{ .name }}
  ports:
    - name: {{ .service.name | default .name }}
      protocol: TCP
      port: {{ .service.port }}
      targetPort: {{ .service.port }}
--- 
{{- end }}
{{- end }}

# job-template
{{- range .Values.jobs }}
apiVersion: batch/v1
kind: Job
metadata:
    name: {{ printf "%s-job" .name }}
spec:
  completions: {{ .completions }}
  backoffLimit: {{ .backoffLimit }}
  selector: {} # Ensure that the selector is auto-generated
  template:
    metadata:
      labels:
        app: {{ .name }}
    spec:
      restartPolicy: Never
      containers:
        - name: {{ .name }}
          image: {{ .image }}
          resources:
            requests:
              cpu: "{{ .resources.requests.cpu }}"
              memory: "{{ .resources.requests.memory }}"
            limits:
              cpu: "{{ .resources.limits.cpu }}"
              memory: "{{ .resources.limits.memory }}"
          envFrom:
            - configMapRef:
                name: common-config
            - secretRef:
                name: common-secrets
          env:
            {{- range $key, $value := .env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
--- 
{{- end }}

# pvc-template

{{- range .Values.volumes }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ printf "%s-pvc" .name }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .storage }}
---     
{{- end }}

# cronjob-template

{{- range .Values.cronJobs }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .name }}
spec:
  schedule: "{{ .schedule }}"
  successfulJobsHistoryLimit: {{ .successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .failedJobsHistoryLimit }}
  concurrencyPolicy: {{ .concurrencyPolicy }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: {{ .name }}-cron
        spec:
          containers:
            - name: {{ .name }}-cron
              image: "{{ .image }}"
              resources:
                requests:
                  cpu: "{{ .resources.requests.cpu }}"
                  memory: "{{ .resources.requests.memory }}"
                limits:
                  cpu: "{{ .resources.limits.cpu }}"
                  memory: "{{ .resources.limits.memory }}"
              envFrom:
                - configMapRef:
                    name: common-config
                - secretRef:
                    name: common-secrets
              env:
                - name: MODE
                  value: "cron"
          restartPolicy: OnFailure
---
{{- end }}

# ingress-template

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-svc
  {{- if .Values.ingress.annotations }}
  annotations:  
    {{- range $key, $value := .Values.ingress.annotations }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  {{- end }}
spec:
  ingressClassName: {{ .Values.ingress.ingressClassName }}
  {{- if .Values.ingress.tls }}
  tls:
    - hosts:
        {{- range .Values.ingress.tls.hosts }}
        - {{ . }}
        {{- end }}
      secretName: {{ .Values.ingress.tls.secretName }}
  {{- end }}
  rules:
    {{- range .Values.ingress.rules }}
    {{- if .host }}
    - host: {{ .host }}
    {{- end }}
      http:
        paths:
          {{- range .paths }}
          - path: {{ .path }}
            pathType: {{ .pathType }}
            backend:
              service:
                name: {{ .backend.serviceName }}
                port:
                  number: {{ .backend.servicePort }}
          {{- end }}
    {{- end }}


# RBAC

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""]

  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]